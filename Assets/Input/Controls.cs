//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""actions"",
            ""id"": ""22a5b0b9-6851-4e72-a050-accf9d6a9637"",
            ""actions"": [
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""b8613af7-f774-4ba1-bb4c-dda597977b57"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reroll"",
                    ""type"": ""Button"",
                    ""id"": ""f6d5d788-3f62-4c70-b977-b0c4329eb3a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3eaa6bcd-cefa-4f6b-9ed0-9dd5f396db73"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4cc50dfb-c2da-40b7-a091-586f5b70c954"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f9e91f5-eaa7-4802-a0f2-76454b8ed3d1"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8308b56-6410-4903-a21d-c25f52ddd3b9"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // actions
        m_actions = asset.FindActionMap("actions", throwIfNotFound: true);
        m_actions_Mouse = m_actions.FindAction("Mouse", throwIfNotFound: true);
        m_actions_Reroll = m_actions.FindAction("Reroll", throwIfNotFound: true);
        m_actions_MouseMove = m_actions.FindAction("MouseMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // actions
    private readonly InputActionMap m_actions;
    private IActionsActions m_ActionsActionsCallbackInterface;
    private readonly InputAction m_actions_Mouse;
    private readonly InputAction m_actions_Reroll;
    private readonly InputAction m_actions_MouseMove;
    public struct ActionsActions
    {
        private @Controls m_Wrapper;
        public ActionsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse => m_Wrapper.m_actions_Mouse;
        public InputAction @Reroll => m_Wrapper.m_actions_Reroll;
        public InputAction @MouseMove => m_Wrapper.m_actions_MouseMove;
        public InputActionMap Get() { return m_Wrapper.m_actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
            {
                @Mouse.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnMouse;
                @Reroll.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnReroll;
                @Reroll.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnReroll;
                @Reroll.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnReroll;
                @MouseMove.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnMouseMove;
                @MouseMove.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnMouseMove;
                @MouseMove.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnMouseMove;
            }
            m_Wrapper.m_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @Reroll.started += instance.OnReroll;
                @Reroll.performed += instance.OnReroll;
                @Reroll.canceled += instance.OnReroll;
                @MouseMove.started += instance.OnMouseMove;
                @MouseMove.performed += instance.OnMouseMove;
                @MouseMove.canceled += instance.OnMouseMove;
            }
        }
    }
    public ActionsActions @actions => new ActionsActions(this);
    public interface IActionsActions
    {
        void OnMouse(InputAction.CallbackContext context);
        void OnReroll(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
    }
}
